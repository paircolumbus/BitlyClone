require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SessionsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Session. As you add validations to Session, be sure to
  # adjust the attributes here as well.
  let(:login) { 'login' }
  let(:password) { 'password' }
  let(:valid_attributes) do
    {
      transient_login: login,
      transient_password: password
    }
  end

  let(:invalid_attributes) do
    {
      transient_login: 'wrong login',
      transient_password: 'wrong password'
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SessionsController. Be sure to keep this updated too.
  let(:valid_session) { { user_id: 1 } }
  let(:invalid_session) { {} }

  describe 'GET index' do
    it 'redircets to new session' do
      get :index, {}, invalid_session
      expect(response).to redirect_to(new_session_url)
    end
  end

  describe 'GET new' do
    it 'redirects to urls on active session' do
      get :new, {}, valid_session
      expect(response).to redirect_to(urls_url)
    end

    it 'assigns a new session as @session' do
      get :new, {}, invalid_session
      expect(assigns(:session)).to be_a_new(Session)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      let(:user_id) { 1 }
      let(:user_mock) { double('User') }
      before do
        expect(user_mock).to receive(:id).and_return(user_id)
        expect(User)
          .to receive(:find_by_login_and_password)
          .with(login, password)
          .and_return(user_mock)
      end

      it 'creates a new Session with valid user id' do
        post :create, { session: valid_attributes }, invalid_session
        expect(session[:user_id]).to eq(user_id)
      end

      it 'redirects to the created session' do
        post :create, { session: valid_attributes }, invalid_session
        expect(response).to redirect_to(urls_url)
      end
    end

    describe 'with invalid params' do
      it "re-renders the 'new' template with an error message" do
        post :create, { session: invalid_attributes }, invalid_session
        expect(response).to redirect_to(new_session_path)
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested session' do
      delete :destroy, { id: 1 }, valid_session
      expect(session[:user_id]).to be_nil
      expect(response).to redirect_to(new_session_path)
    end
  end
end
