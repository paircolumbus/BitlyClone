require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UrlsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Url. As you add validations to Url, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { target_link: 'http://google.com/' } }

  let(:invalid_attributes) { { target_link: 'wqaesrdtfyjguhj' } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UrlsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET index' do
    it 'assigns all urls as @urls' do
      url = Url.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:urls)).to eq([url])
    end
  end

  describe 'GET show' do
    it 'assigns the requested url as @url' do
      url = Url.create! valid_attributes
      get :show, { id: url.id }, valid_session
      expect(assigns(:url)).to eq(url)
    end
  end

  describe 'GET new' do
    subject { get :new, {}, valid_session }

    it 'renders the new Url form' do
      expect(subject.status).to eq 200
      expect(subject).to render_template :new
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new Url' do
        expect { post :create, valid_attributes, valid_session }
          .to change(Url, :count).by(1)
        expect(response).to redirect_to(Url.last)
      end
    end

    describe 'with invalid params' do
      subject { post :create, invalid_attributes, valid_session }
      it 're-renders the new template' do
        expect(subject).to render_template :new
      end
    end

    describe 'with missing target' do
      subject { post :create, { target_link: '' }, valid_session }
      it 're-renders the new template' do
        expect(subject).to render_template :new
      end
    end

    describe 'with unreachable link' do
      bad_link = 'http://a.a.a.a.a.a.a/'
      subject { post :create, { target_link: bad_link }, valid_session }
      it 're-renders the new template' do
        expect(subject).to render_template :new
      end
    end
  end

  describe 'GET follow' do
    let(:url) { Url.create! valid_attributes }

    it 'redirects to target' do
      get :follow, { linkid: url.linkid }, valid_session
      expect(response).to redirect_to url.target_link
    end
  end
end
