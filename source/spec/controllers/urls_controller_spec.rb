require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UrlsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Url. As you add validations to Url, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { short_url: 'c35c02c2', real_url: 'http://www.google.com', click_count: 2 }
  }

  let(:invalid_attributes) {
    { short_url: 'c35c02c2', real_url: 'httpq://www.google.com', click_count: -1 }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UrlsController. Be sure to keep this updated too.
  let(:valid_session) { { user_id: 1 } }
  include SessionsHelper

  describe "GET index" do
    it "redirects to login page if not logged in" do
      get :index
      expect(response).to redirect_to(login_path)
    end

    it "assigns all urls as @urls" do
      url = Url.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:urls)).to eq([url])
    end
  end

  describe "GET show" do
    it "responds 404 to invalid short_url" do
      expect {
        get :show, {:id => 'invalid short url'}, valid_session
      }.to raise_exception(ActiveRecord::RecordNotFound)
    end
    it "redirects to the real_url" do
      url = Url.create! valid_attributes
      get :show, {:id => url.short_url}, valid_session
      expect(response).to redirect_to(url.real_url)
    end
    it "increments click_count" do
      url = Url.create! valid_attributes
      old_count = url.click_count
      get :show, {:id => url.short_url}, valid_session
      url.reload
      expect(url.click_count).to be > old_count
    end
  end

  describe "GET new" do
    it "redirects to login page if not logged in" do
      get :new
      expect(response).to redirect_to(login_path)
    end

    it "assigns a new url as @url" do
      get :new, {}, valid_session
      expect(assigns(:url)).to be_a_new(Url)
    end
  end

  describe "POST create" do
    it "redirects to login page if not logged in" do
      post :create
      expect(response).to redirect_to(login_path)
    end

    describe "with valid params" do
      it "creates a new Url" do
        expect {
          post :create, {:url => valid_attributes}, valid_session
        }.to change(Url, :count).by(1)
      end

      it "assigns a newly created url as @url" do
        post :create, {:url => valid_attributes}, valid_session
        expect(assigns(:url)).to be_a(Url)
        expect(assigns(:url)).to be_persisted
      end

      it "redirects to the index url" do
        post :create, {:url => valid_attributes}, valid_session
        expect(response).to render_template("index")
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved url as @url" do
        post :create, {:url => invalid_attributes}, valid_session
        expect(assigns(:url)).to be_a_new(Url)
      end

      it "re-renders the 'new' template" do
        post :create, {:url => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

end
